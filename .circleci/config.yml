version: 2.1

jobs:
  # hello-world:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Say Hello
  #         command: |
  #           echo "Hello World"
  backend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend Build
          command: |
            ls
            cd backend
            npm ci
            npm run build
      # - save_cache:
      #     key: backend-{{ checksum "package-lock.json" }}
      #     paths:
      #       - backend/node_modules
  backend-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: backend-{{ checksum "/backend/package-lock.json" }}
      - run:
          name: Run Backend tests with JUnit as reporter
          command: |
            cd backend
            npm ci
            npm t -- --ci --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
      - run:
          name: Backend Tests failed
          command: |
            echo "Backend tests have failed, placeholder for later"
          when: on_fail
  backend-npmaudit:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit npm packages
          command: |
            cd backend
            npm audit --audit-level=critical

  frontend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm ci
            npm run build
      # - save_cache:
      #     key: frontend-{{ checksum "./frontend/package-lock.json" }}
      #     paths:
      #       - frontend/node_modules
  frontend-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: frontend-{{ checksum "./frontend/package-lock.json" }}
      - run:
          name: Run frontend tests with JUnit as reporter
          command: |
            cd frontend
            npm ci
            npm t -- --ci --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
      - run:
          name: frontend Tests failed
          command: |
            echo "frontend tests have failed, placeholder for later"
          when: on_fail
  frontend-npmaudit:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit npm packages
          command: |
            cd frontend
            npm audit --audit-level=critical
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name udapeople \
              --parameter-overrides ID=udapeople
            # aws ec2 describe-instances \
            # \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --filters "Name=tag:Project,Values=backend-udapeople" \
            #   --output text >> inventory
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["af:49:bb:53:37:e7:0c:a4:1d:2b:c4:3f:5a:bc:5d:68"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt playbook.yml
workflows:
  default:
    jobs:
      # - hello-world
      # - frontend-npmaudit
      # - backend-npmaudit
      # - backend-build:
      #     requires:
      #       - backend-npmaudit
      # - frontend-build:
      #     requires:
      #       - frontend-npmaudit
      # - backend-test:
      #     requires:
      #       - backend-build
      # - frontend-test:
      #     requires:
      #       - frontend-build
      - create-infrastructure
