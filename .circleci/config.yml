version: 2.1

jobs:
  hello-world:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: We get a new workflow ID
          command: |
            PREVIOUS_WORKFLOW_ID=$(curl -H "token: bc99fda4-cac2-4d84-bb29-aae87cbbcbbf" --request GET https://api.memstash.io/values/udapeople-production)
            #current build
            # not needed  as workflow id is accessible. Left it for easy copy paste, TODO: Remove in the end
            # curl -H "Content-Type: text/plain" -H "token: bc99fda4-cac2-4d84-bb29-aae87cbbcbbf" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/udapeople-candidate
            echo "commit sha1 ${CIRCLE_SHA1}"
            echo "Candidate id: ${CIRCLE_WORKFLOW_ID}"
            echo "Production id: ${PREVIOUS_WORKFLOW_ID}"
  backend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend Build
          command: |
            ls
            cd backend
            npm ci
            npm run build
      # - save_cache:
      #     key: backend-{{ checksum "package-lock.json" }}
      #     paths:
      #       - backend/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
  backend-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: backend-{{ checksum "/backend/package-lock.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Run Backend tests with JUnit as reporter
          command: |
            mkdir -p reports/junit
            cd backend
            sudo npm install -g jest
            jest --ci --runInBand --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /home/circleci/project/reports/junit/
            JEST_JUNIT_OUTPUT_NAME: junit.xml
          # environment:
          #   JEST_JUNIT_OUTPUT: ./reports/junit/js-test-results.xml
          # environment:
          #   JEST_JUNIT_OUTPUT: ./frontend/coverage/cloverage.xml
      - store_artifacts:
          path: ./reports/junit
      - store_test_results:
          path: ./reports/junit
      - run:
          name: Backend Tests failed
          command: |
            echo "Backend tests have failed"
          when: on_fail
  backend-npmaudit:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit npm packages
          command: |
            cd backend
            npm audit --audit-level=critical
      - persist_to_workspace:
          root: .
          paths:
            - backend
  frontend-npmaudit:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Audit npm packages
          command: |
            cd frontend
            npm audit --audit-level=critical
      - persist_to_workspace:
          root: .
          paths:
            - frontend
  frontend-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm ci
            npm run build
      # - save_cache:
      #     key: frontend-{{ checksum "./frontend/package-lock.json" }}
      #     paths:
      #       - frontend/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
  frontend-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: frontend-{{ checksum "./frontend/package-lock.json" }}
      - attach_workspace:
          at: .
      - run:
          name: Run frontend tests with JUnit as reporter
          command: |
            mkdir -p reports/junit
            cd frontend
            sudo npm install -g jest
            jest --ci --runInBand --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: ./reports/junit/js-test-results.xml
          # environment:
          #   JEST_JUNIT_OUTPUT: ./frontend/coverage/cloverage.xml
      - store_artifacts:
          path: ./reports/junit
      - store_test_results:
          path: ./reports/junit
      - run:
          name: frontend Tests failed
          command: |
            echo "frontend tests have failed, placeholder for later"
          when: on_fail
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: list the folder structure
          command: |
            ls -a
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
            \
            # aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-2bd05d16-e553-43a3-904f-b04da5fd3006" --output text >> inventory.txt
            \
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text)" https://api.memstash.io/values/udapeople-backend
            #command to get the backend url
            #curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/udapeople-backend
      # since we do not use the inventory text we do not have to install tar to the image as required by circleci. I leave the comments as a reminder.
      # - run:
      #     name: Install tar
      #     command: |
      #       sudo apt install tar
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - inventory.txt
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    # environment:
    #   ANSIBLE_HOST_KEY_CHECKING: "False"
    steps:
      # - attach_workspace:
      #     at: .
      - checkout
      - add_ssh_keys:
          fingerprints: ["af:49:bb:53:37:e7:0c:a4:1d:2b:c4:3f:5a:bc:5d:68"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook \
            apk add curl
      - run:
          name: Get the server
          command: |
            echo "[all]" > inventory.txt
            curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/udapeople-backend >> inventory.txt
      - run:
          name: Configure server
          command: |
            ls -a
            cat inventory.txt
            ansible-playbook -i inventory.txt .circleci/ansible/main.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl aws-cli
      - run:
          name: smoke test.
          command: |
            if curl -s --head $(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/udapeople-backend):3000
            then
             return 0
            else
             return 1
            fi
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CICRLE_WORKFLOW_ID}
          when: on_fail
  configure_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: |
          cd frontend
          touch .env
          API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/udapeople-backend):3030
          echo "API_URL=${API_URL}" >> .env
          cat .env
          npm ci
          npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: .
      - run: |
          aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run: aws s3 sync ./frontend/dist/ s3://"udapeople-${CIRCLE_WORKFLOW_ID}" --delete
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-prod-${CIRCLE_WORKFLOW_ID} \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
  cleanup_previous_deployment:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          PREVIOUS_BUILD=$(curl -H "token: bc99fda4-cac2-4d84-bb29-aae87cbbcbbf" --request GET https://api.memstash.io/values/udapeople-production)
          if $PREVIOUS_BUILD
          then
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-${PREVIOUS_BUILD}
            # delete all inside the bucket and remove it
            aws s3 rb s3://udapeople-${PREVIOUS_BUILD} --force 
            aws cloudformation delete-stack \
              --stack-name udapeople-frontend-${PREVIOUS_BUILD}
            aws cloudformation delete-stack \
              --stack-name udapeople-prod-${PREVIOUS_BUILD}
          fi
  promote_worflowid_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: New workflow id for production
          command: |
            curl -H "Content-Type: text/plain" -H "token: bc99fda4-cac2-4d84-bb29-aae87cbbcbbf" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/udapeople-production
workflows:
  default:
    jobs:
      - hello-world
      - frontend-npmaudit
      - backend-npmaudit
      - backend-build:
          requires:
            - backend-npmaudit
      - frontend-build:
          requires:
            - frontend-npmaudit
      - backend-test:
          requires:
            - backend-build
      - frontend-test:
          requires:
            - frontend-build
      # - create_infrastructure:
      #     requires:
      #       - backend-test
      # - configure_infrastructure:
      #     requires:
      #       - create_infrastructure
      # - smoke_test:
      #     requires:
      #       - configure_infrastructure
      # - configure_frontend:
      #     requires:
      #       - smoke_test
      # - create_and_deploy_front_end:
      #     requires:
      #       - configure_frontend
      #       - frontend-test
      #     filters:
      #       branches:
      #         only: master # Only deploy when the commit is on the Master branch
      # - promote_to_production:
      #     requires: [create_and_deploy_front_end]
      #     filters:
      #       branches:
      #         only: master
      # - cleanup_previous_deployment:
      #     requires: [promote_to_production]
      # - promote_worflowid_production:
      #     requires: [promote_to_production, cleanup_previous_deployment]
